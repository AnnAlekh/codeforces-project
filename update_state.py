import requests
import re
from datetime import datetime

def get_codeforces_stats(handle):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Codeforces API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_url = f"https://codeforces.com/api/user.info?handles={handle}"
        user_response = requests.get(user_url, timeout=10)
        user_data = user_response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        submissions_url = f"https://codeforces.com/api/user.status?handle={handle}"
        submissions_response = requests.get(submissions_url, timeout=10)
        submissions_data = submissions_response.json()
        
        if user_data['status'] == 'OK' and submissions_data['status'] == 'OK':
            user_info = user_data['result'][0]
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            solved_problems = set()
            for submission in submissions_data['result']:
                if submission['verdict'] == 'OK':  # –†–µ—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
                    problem = submission['problem']
                    problem_id = f"{problem['contestId']}{problem['index']}"
                    solved_problems.add(problem_id)
            
            rating = user_info.get('rating', '–ù–æ–≤–∏—á–æ–∫')
            max_rating = user_info.get('maxRating', '–ù–æ–≤–∏—á–æ–∫')
            solved_count = len(solved_problems)
            
            return rating, max_rating, solved_count
        else:
            return "–ù–æ–≤–∏—á–æ–∫", "–ù–æ–≤–∏—á–æ–∫", 0
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return "–ù–æ–≤–∏—á–æ–∫", "–ù–æ–≤–∏—á–æ–∫", 0

def update_readme():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç README.md —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    handle = "dumooroo"
    rating, max_rating, solved_count = get_codeforces_stats(handle)
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π README
    try:
        with open('README.md', 'r', encoding='utf-8') as file:
            content = file.read()
    except FileNotFoundError:
        print("–§–∞–π–ª README.md –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –±–µ–π–¥–∂–∏
    new_badges = f'''[![Codeforces](https://img.shields.io/badge/Codeforces-dumooroo-blue?style=for-the-badge&logo=codeforces)](https://codeforces.com/profile/dumooroo)
[![–†–µ–π—Ç–∏–Ω–≥](https://img.shields.io/badge/–†–µ–π—Ç–∏–Ω–≥-{rating}-green?style=for-the-badge)](https://codeforces.com/profile/dumooroo)
[![–†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á](https://img.shields.io/badge/–†–µ—à–µ–Ω–æ_–∑–∞–¥–∞—á-{solved_count}+-brightgreen?style=for-the-badge)](https://codeforces.com/submissions/dumooroo)'''
    
    badge_section_pattern = r'<div align="center">\s*\n.*?\n.*?\n.*?\s*</div>'
    
    new_badge_section = f'''<div align="center">

{new_badges}

*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime("%d.%m.%Y %H:%M")}*

</div>'''
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å–µ–∫—Ü–∏—é –±–µ–π–¥–∂–µ–π
    content = re.sub(badge_section_pattern, new_badge_section, content, flags=re.DOTALL)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    with open('README.md', 'w', encoding='utf-8') as file:
        file.write(content)
    
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    print(f"üìä –†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: {solved_count}")
    print(f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {rating}")
    print(f"‚≠ê –ú–∞–∫—Å. —Ä–µ–π—Ç–∏–Ω–≥: {max_rating}")

if __name__ == "__main__":
    update_readme()